<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	
<!-- 	<display-name>study_board</display-name> -->
<!-- 	<welcome-file-list> -->
<!-- 		<welcome-file>index.html</welcome-file> -->
<!-- 		<welcome-file>index.htm</welcome-file> -->
<!-- 		<welcome-file>index.jsp</welcome-file> -->
<!-- 		<welcome-file>default.html</welcome-file> -->
<!-- 		<welcome-file>default.htm</welcome-file> -->
<!-- 		<welcome-file>default.jsp</welcome-file> -->
<!-- 	</welcome-file-list> -->
	
	<!-- The definition of the Root Spring Container shared by all Servlets 
		and Filters -->
	<!-- 여러개의 설정파일을 사용할때 -->
	<!-- 스프링의 환경설정 파일인 *-context.xml을 가장 먼저 참조한다. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
<!-- 		<param-value>/WEB-INF/spring/*-context.xml</param-value> -->
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/appServlet/datasource-context.xml
		</param-value>
	</context-param>
	
	<servlet>
		<!-- dispatcherservlet은 spring Container를 생성,어플리케이션의 요청을 처리하는 부분 -->
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextLoader가 해당 위치의 설정 파일을 읽어, 해당 파일을 dispatcher servlet으로 만든다. -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- /WEB-INF/spring/appServlet/*-context.xml을 참조 -->
			<!-- xml파일 안에 정의된 객체들을 로딩한다 -->
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
<!-- 			<param-value>/WEB-INF/spring/appServlet/*-context.xml</param-value> -->
		</init-param>
		<!-- 가장 첫번째 우선순위를 뜻한다 -->
		<load-on-startup>1</load-on-startup>
<!-- 		<multipart-config></multipart-config> -->
	</servlet>
	<!-- /로 시작하는 url요청을 받아 springDispatcherServlet에서 처리한다. -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	<!-- 인코딩을 UTF-8로 설정하여 필터링하겠다는 설정 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<!-- /의 형식으로 시작하는 url에 대하여 UTF-8로 인코딩 -->
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	
	<!-- ${cp}를 사용하기 위한 리스너 -->
	<listener>
		<listener-class>kr.letech.listener.ContextPathInitListener</listener-class>
	</listener>
	
	
	
	<!-- 계층별로 나눈 xml 설정파일이 있다고 가정할 때, web.xml에서 모두 load되도록 등록할 때 사용. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	
	
</web-app>